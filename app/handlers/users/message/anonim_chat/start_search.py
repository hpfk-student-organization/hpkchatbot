import asyncio

import aiogram
from aiogram import types
from aiogram.filters import Text, StateFilter
from aiogram.fsm.context import FSMContext

from keyboards.default import AnonymousChatKb
from routers.private_chat.private_chat import router
from scheduler.anonim_chat import jobs_id, add_job
from states import AnonymousChatStates
from utils.mysql import AnonimChat


@router.message(Text(text=AnonymousChatKb.start_search_btn),
                StateFilter(AnonymousChatStates.main_menu))
async def search_user_to_talk(message: types.Message, state: FSMContext, bot: aiogram.Bot):
    """–ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –≤ —Ä–æ–∑–¥—ñ–ª lesson"""
    await message.answer(
        "üîß –ß–∞—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π"
    )
    return

    if AnonimChat().get_sex_in_info_user(telegram_id=message.from_user.id) is None:
        message_text = "–©–æ–± –±–æ—Ç –∑–º—ñ–≥ –∑'—î–¥–Ω–∞—Ç–∏ —Ç–µ–±–µ –∑ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–æ–º –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ—ó —Å—Ç–∞—Ç—ñ, –≤–∞—Ä—Ç–æ —Å–ø–æ—á–∞—Ç–∫—É –≤–∫–∞–∑–∞—Ç–∏ —Å–≤–æ—é" \
                       "\n\n–ù–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ–π –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ —î –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è¬ª , —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –Ω–µ—é, –æ–±—Ä–∞–≤—à–∏ —Ö—Ç–æ —Ç–∏ —î."
        await message.answer(
            text=message_text
        )
        return
    # if not AnonimChat().is_check_exist_in_queue(telegram_id=message.from_user.id):
    AnonimChat().update_queue_status(telegram_id=message.from_user.id, status=True)

    await state.set_state(AnonymousChatStates.search)

    sex_status_by_user = AnonimChat().get_sex_in_info_user(telegram_id=message.from_user.id)

    message_text = "–®—É–∫–∞—î–º–æ –¥–ª—è —Ç–µ–±–µ {0} ..."
    await message.answer(
        text=message_text.format('—Ö–ª–æ–ø—Ü—è' if not sex_status_by_user else '–¥—ñ–≤—á–∏–Ω—É'),
        reply_markup=AnonymousChatKb().search()
    )
    await add_job(bot=bot, state=state, _jobs_id=jobs_id[0])
    await asyncio.sleep(2)
    if not AnonimChat().is_check_exist_with_connect(telegram_id=message.from_user.id):
        await who_in_queue_for_search_user_to_talk(message=message)


@router.message(Text(text=AnonymousChatKb.who_online_btn, ),
                StateFilter(AnonymousChatStates.search))
async def who_in_queue_for_search_user_to_talk(message: types.Message):
    sex, count = AnonimChat().get_count_user_in_queue()

    count_in_connect = AnonimChat().get_count_with_connect()
    count_in_queue = AnonimChat().get_count_in_queue()

    count_women_in_queue = count[sex.index(0)] if sex.count(0) else 0
    count_men_in_queue = count[sex.index(1)] if sex.count(1) else 0

    message_text = "–í—Å—å–æ–≥–æ –≤ –æ–Ω–ª–∞–π–Ω {0} –ª—é–¥–∏–Ω–∞:\n\n" \
                   "üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤ - {1}\n\n" \
                   "–í —á–µ—Ä–∑—ñ - {2} üë® —Ç–∞ {3} üë©"
    await message.answer(
        text=message_text.format(
            count_in_connect + count_in_queue, int(count_in_connect / 2), count_men_in_queue, count_women_in_queue)
    )


@router.message(Text(text=AnonymousChatKb.cancel_search_btn),
                StateFilter(AnonymousChatStates.search))
async def cancel_search_new_user(message: types.Message, state: FSMContext):
    """Cansel find process new user for talk"""
    AnonimChat().update_queue_status(telegram_id=message.from_user.id, status=False)
    from handlers.users.message.main import anonymous_chat_button
    await anonymous_chat_button(message=message, state=state)
