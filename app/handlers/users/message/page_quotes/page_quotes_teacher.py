# –ø–µ—Ä–µ–≥–ª—è–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏, –≤–∏–±–∏—Ä–∞—î–º–æ –≤–∏–∫–ª–∞–¥–∞—á–∞ —ñ –ø–µ—Ä–µ–≥–ª—è–¥–∞—î–º–æ –π–æ–≥–æ —Ü–∏—Ç–∞—Ç—É
import math
import random

from aiogram import types
from aiogram.filters import StateFilter, Text
from aiogram.fsm.context import FSMContext

from keyboards.default import QuotesTeacherKb
from routers.private_chat.private_chat import router
from states import QuotesTeacherStates
from utils.mysql import QuotesTeacher
from utils.tools import sort


def __remove_last_quotes_with_list_quotes(list_quotes: list) -> tuple[list, str]:
    """
        –ö–æ–ø—ñ—é—î list, —è–∫ –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç, —ñ –≤–∏–¥–∞–ª—è—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç. –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø—ñ–¥–±–æ—Ä—É —Ü–∏—Ç–∞—Ç

    Args:
        list_quotes: —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç

    Returns: –ù–æ–≤–∏–π —Å–ø–∏—Å–æ–∫, —è–∫–∏–π –º–µ–Ω—à–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –Ω–∞ 1 –µ–ª–µ–º–µ–Ω—Ç, –≤–∏–¥–∞–ª–µ–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç

    """
    list_quotes_copy = list_quotes.copy()  # –∫–æ–ø—ñ—é—î–º–æ —Å–ø–∏—Å–æ–∫, —â–æ–± —Ü–µ –±—É–≤ —ñ–Ω—à–∏–π –æ–±'—î–∫—Ç
    remove_quotes = list_quotes_copy.pop()  # –≤–∏–¥–∞–ª–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç, –ø—Ä–∏ —Ü—å–æ–º—É –ø–æ–≤–µ—Ä–Ω–µ–º–æ —Ü–µ–π –µ–ª–µ–º–µ–Ω—Ç.
    return list_quotes_copy, remove_quotes


def __get_new_list():
    """
    –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑ —Ñ—Ä–∞–∑–∞–º–∏
    @return: list()
    """
    return [
        '–Ø —Å–∫–∞–∑–∞–≤, –∂ –Ω—ñ—á–æ–≥–æ!',
        'üòë',
        '–ü–æ–≤—Ç–æ—Ä—è—é —â–µ —Ä–∞–∑, —Ç–∞–º –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î!', '-_-',
        '–ù—É —ñ –¥–ª—è –∫–æ–≥–æ —Ü–µ —è —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—é üßê',
        '–Ø–∫ —Ç–∏ –ø–ª–∞–Ω—É—î—à —Ç—É–¥–∏ –ø–µ—Ä–µ–π—Ç–∏? –¢–∞–º –∂ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î)',
        '–¢–∏ —Ä–æ–±–∏—à –í–ï–õ–ò–ö–£ –ø–æ–º–∏–ª–∫—É!',
        '–ë–Ü–ü.–ë–£–ü.–ë–£–ü.–ë–Ü–ü',
        '–¢–∞–∫–æ—ó –Ω–∞–ø–æ–ª–µ–≥–ª–∏–≤—ñ –Ω–µ—Ö–≤–∞—Ç–∞—î –Ω–∞ –ø–∞—Ä—ñ –≤ –°—ñ–≤–∫–∞',
        '–Ü –¥–æ–≤–≥–æ –º–∏ —Ç—É—Ç –±—É–¥–µ–º–æ –ø—Ä–æ–±—É–≤–∞—Ç–∏ —Ä—É–π–Ω—É–≤–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –í—Å–µ—Å–≤—ñ—Ç—É? ü§ì',
        'Error 404',
        '–Ø –∑—Ä–æ–∑—É–º—ñ–≤, —Ü–µ –±—É–¥–µ –¥–æ–≤–≥–æ...',
        '–Ø–∫–∞ —á—É–¥–æ–≤–∞ –ø–æ–≥–æ–¥–∞!'
    ]


async def __get_random_jocker_text(state: FSMContext, first: str = None) -> str:
    """

    –¢–µ–∫—Å—Ç, —è–∫–∏–π –ø–æ—è–≤–ª—è—î—Ç—å—Å—è, —è–∫—â–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–π—Ç–∏ –∑–∞ –∫—Ä–∞–π —Å–ø–∏—Å–∫—É

    @param state:
    @param first:
    @return:
    """

    user_data = await state.get_data()
    list_jokers = user_data.get('list_jokers', None)
    if not list_jokers:  # if result is none
        list_jokers = __get_new_list()
        await state.update_data(list_jokers=list_jokers)
        if first:
            return first

    if not list_jokers[:-1]:
        await state.update_data(list_jokers=__get_new_list())
        return list_jokers[-1]

    random.shuffle(list_jokers)
    await state.update_data(list_jokers=list_jokers[:-1])
    return list_jokers[-1]


# –ø–µ—Ä–µ—Ö—ñ–¥ –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏

@router.message(
    Text(text=QuotesTeacherKb.next_btn),
    StateFilter(QuotesTeacherStates.main_menu),
)
async def next_page_button(message: types.Message, state: FSMContext):
    """–ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É"""
    user_data = await state.get_data()
    list_all_teachers = list(sort(QuotesTeacher().select_all_list_teachers()))
    level_page_quotes = user_data.get("level_page_quotes")
    last_page_quotes = math.ceil(len(list_all_teachers) / 4)
    if level_page_quotes >= last_page_quotes:
        # —è–∫—â–æ –º–∏ –≤–∂–µ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        message_text = await __get_random_jocker_text(state=state, first='–¢–∞–º –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î, —á—É—î—à –Ω—ñ—á–æ–≥–æ!')
        await message.answer(text=message_text)
        return

    message_text = f"–¢–∏ –Ω–∞ {level_page_quotes + 1} —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ"
    await message.answer(
        text=message_text,
        reply_markup=QuotesTeacherKb.main_menu(
            list_all_teachers=list_all_teachers,
            number_page=level_page_quotes + 1
        )
    )
    await state.update_data(level_page_quotes=level_page_quotes + 1)


@router.message(
    Text(text=QuotesTeacherKb.last_btn),
    StateFilter(QuotesTeacherStates.main_menu),
)
async def last_page_button(message: types.Message, state: FSMContext):
    """–ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É"""
    user_data = await state.get_data()
    # list_all_teachers = list(sort(QuotesTeacher().select_all_list_teachers(), key_list=language.UA_RUS_EN))
    list_all_teachers = list(sort(QuotesTeacher().select_all_list_teachers()))
    level_page_quotes = user_data.get("level_page_quotes")

    if level_page_quotes <= 1:
        # If user on first page
        message_text = await __get_random_jocker_text(state=state, first='–¢–∞–º –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î, —á—É—î—à –Ω—ñ—á–æ–≥–æ!')
        await message.answer(text=message_text)
        return

    message_text = f"–¢–∏ –Ω–∞ {level_page_quotes - 1} —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ"
    await message.answer(
        text=message_text,
        reply_markup=QuotesTeacherKb.main_menu(
            list_all_teachers=list_all_teachers,
            number_page=level_page_quotes - 1
        )
    )
    await state.update_data(level_page_quotes=level_page_quotes - 1)


@router.message(
    StateFilter(QuotesTeacherStates.main_menu) and Text(endswith=list(QuotesTeacher().select_all_list_teachers())),

)
async def click_to_teacher_button(message: types.Message, state: FSMContext):
    """–ù–∞—Ç–∏—Å–Ω–µ–º–æ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑ –≤–∏–∫–ª–∞–¥–∞—á–µ–º"""
    name_teacher_split: list = message.text.split(' ')

    if len(name_teacher_split)==2:
        name_teacher = name_teacher_split[1]
    else:
        name_teacher = name_teacher_split[0]
    # –æ—Ç—Ä–∏–º—É—î–º–æ —Ü–∏—Ç–∞—Ç–∏, —è–∫—É –≤–∏–¥–∞–ª–∏–ª–∏. –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —Ç–∏–º –±—É–≤ –≤ —Ç–∏–ø–æ–º set - —Ç–æ–±—Ç–æ –Ω–µ –≤–ø–æ—Ä—è–¥–∫–æ–≤–∞–Ω–∏–π
    list_quotes = QuotesTeacher().select_all_quotes_with_teacher(name_teacher)

    # –æ—Ç—Ä–∏–º–∞—î–º–æ –æ–¥–Ω—É —Ü–∏—Ç–∞—Ç—É —ñ –≤–∏–¥–∞–ª–∏–º–æ —ó—ó
    new_list_quotes, quotes = __remove_last_quotes_with_list_quotes(list_quotes)

    # –∑–∞–ø–∏—à–µ–º–æ –¥–ª—è –∫–ª—é—á–∞ teacher –Ω–∞—à–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞
    # –∑–∞–ø–∏—à–µ–º–æ —Å–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç —Ü—å–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞
    await state.update_data(teacher=name_teacher, list_quotes=new_list_quotes)

    message_text = f"–¶–∏—Ç–∞—Ç–∞:\n" \
                   f"¬´ {quotes} ¬ª ({name_teacher})"

    await message.answer(
        text=message_text,
        reply_markup=QuotesTeacherKb.quotes()
    )

    await state.set_state(QuotesTeacherStates.view_quotes)


@router.message(
    Text(text=QuotesTeacherKb.repeat_btn),
    StateFilter(QuotesTeacherStates.view_quotes),
)
async def click_to_view_button(message: types.Message, state: FSMContext):
    """–ö–Ω–æ–ø–∫–∞ - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —â–µ —Ä–∞–∑"""
    user_data = await state.get_data()
    teacher = user_data.get("teacher")
    list_quotes = user_data.get("list_quotes")
    if not list_quotes:
        # —è–∫—â–æ —Å–ø–∏—Å–æ–∫ none
        list_quotes = QuotesTeacher().select_all_quotes_with_teacher(teacher)

    new_list_quotes, quotes = __remove_last_quotes_with_list_quotes(list_quotes)  # –æ—Ç—Ä–∏–º–∞—î–º–æ –æ–¥–Ω—É —Ü–∏—Ç–∞—Ç—É —ñ –≤–∏–¥–∞–ª–∏–º–æ —ó—ó
    await state.update_data(list_quotes=new_list_quotes)

    message_text = f"–¶–∏—Ç–∞—Ç–∞:\n" \
                   f"¬´ {quotes} ¬ª ({teacher})"

    await message.answer(
        text=message_text,
        # reply_markup=QuotesTeacherIKb.quotes()
    )
